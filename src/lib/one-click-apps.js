
    export default {
  "flowise.yml": {
    "content": "captainVersion: 4\nservices:\n  $$cap_appname-postgres:\n    image: ankane/pgvector\n    environment:\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypassword\n      POSTGRES_DB: mydb\n    volumes:\n      - $$cap_appname-db-data:/var/lib/postgresql/data\n    caproverExtra:\n      notExposeAsWebApp: 'true'\n\n  $$cap_appname:\n    restartPolicy: never\n    environment:\n      DATABASE_URL: postgres://myuser:mypassword@postgres:5432/mydb\n      FLOWISE_USERNAME: $$cap_flowise_username\n      FLOWISE_PASSWORD: $$cap_flowise_password\n    caproverExtra:\n      containerHttpPort: 3000\n      dockerfileLines:\n        - FROM flowiseai/flowise:$$cap_flowise_version\n        - CMD /bin/sh -c \"sleep 3; flowise start\"\n    volumes:\n      - $$cap_appname-db-data:/root/.flowise\n\ncaproverOneClickApp:\n  variables:\n    - id: $$cap_flowise_version\n      label: Flowise version\n      defaultValue: 'latest'\n      description: Checkout their docker page for the valid tags https://hub.docker.com/r/flowiseai/flowise/tags\n      validRegex: /^([^\\s^\\/])+$/\n    - id: $$cap_flowise_username\n      label: Flowise Username\n      description: 'Your Flowise username'\n    - id: $$cap_flowise_password\n      label: Flowise Password\n      description: 'Your Flowise password'\n  instructions:\n    start: >-\n      Flowise is a powerful AI tool. Before you start, make sure you have all your environment variables ready to input.\n    end: >-\n      Your Flowise app is now deployed and running!\n  displayName: 'Flowise'\n  description: 'Flowise AI Tool'\n  documentation: 'https://github.com/FlowiseAI/Flowise'\n",
    "logo": "flowise.png"
  },
  "primocms.yml": {
    "content": "captainVersion: 4\nservices:\n    $$cap_appname-db:\n        image: bitnami/supabase-postgres:$$cap_app_version\n        volumes:\n            - $$cap_appname-db-persistence:/bitnami/postgresql\n        restart: always\n        environment:\n            POSTGRES_USER: $$cap_pg_user\n            POSTGRES_DB: $$cap_pg_db\n            POSTGRES_PASSWORD: $$cap_pg_pass\n            POSTGRES_PORT_NUMBER: $$cap_pg_port\n            POSTGRES_INITDB_ARGS: $$cap_pg_initdb_args\n            POSTGRES_REPLICATION_USER: $$cap_pg_repl_user\n            POSTGRES_REPLICATION_MODE: $$cap_pg_repl_mode\n            POSTGRES_REPLICATION_PASSWORD: $$cap_pg_repl_pass\n            POSTGRES_MASTER_HOST: $$cap_pg_master_host\n            POSTGRES_MASTER_PORT_NUMBER: $$cap_pg_master_port\n            POSTGRES_NUM_SYNCHRONOUS_REPLICAS: $$cap_pg_num_sync_repl\n            POSTGRES_SYNCHRONOUS_COMMIT_MODE: $$cap_pg_sync_commit_mode\n        caproverExtra:\n            notExposeAsWebApp: 'true'\ncaproverOneClickApp:\n    variables:\n        - id: $$cap_app_version\n          label: Postgres Version\n          defaultValue: '15.1.0'\n          description: Check out their Docker page for the valid tags https://hub.docker.com/r/bitnami/supabase-postgres/tags\n          validRegex: /^([^\\s^\\/])+$/\n\n        - id: $$cap_pg_user\n          label: Postgres Username\n          defaultValue: 'postgres'\n          validRegex: /.{1,}/\n\n        - id: $$cap_pg_db\n          label: Postgres Default Database\n          defaultValue: 'postgres'\n          validRegex: /.{1,}/\n\n        - id: $$cap_pg_pass\n          label: Postgres Password\n          defaultValue: $$cap_gen_random_hex(32)\n          validRegex: /.{1,}/\n\n        - id: $$cap_pg_port\n          label: Postgres Port\n          defaultValue: '5432'\n          validRegex: /\\d+/\n\n        - id: $$cap_pg_initdb_args\n          label: \"OPTIONAL: Arguments for 'postgres initdb'\"\n          description: For example, --data-checksums\n\n        - id: $$cap_pg_repl_user\n          label: Postgres Replication User\n          description: 'The replication user created on the master on first run. No defaults.'\n\n        - id: $$cap_pg_repl_mode\n          label: Postgres Replication Mode\n          description: 'Replication mode. Possible values `master` or `slave`. No defaults.'\n          validRegex: /^(master|slave|)$/\n\n        - id: $$cap_pg_repl_pass\n          label: Postgres Replication Password\n          description: 'The replication users password. No defaults.'\n\n        - id: $$cap_pg_master_host\n          label: Postgres Master Host\n          description: 'Hostname/IP of replication master (slave parameter). No defaults.'\n\n        - id: $$cap_pg_master_port\n          label: Postgres Master Port\n          description: 'Server port of the replication master (slave parameter). Defaults to 5432.'\n\n        - id: $$cap_pg_num_sync_repl\n          label: Postgres number of synchronous replica\n          description: 'Number of replicas that will enable synchronous replication'\n\n        - id: $$cap_pg_sync_commit_mode\n          label: Postgres Replication Commit Mode\n          description: 'Type of synchronous commit. The available options are: `on`, `remote_apply`, `remote_write`, `local` and `off`. The default value is on.'\n          defaultValue: 'on'\n          validRegex: /^(on|remote_apply|remote_write|local|off|)$/\n\n    instructions:\n        start: >-\n            Postgres + goodies = Supabase Postgres\n            Unmodified Postgres with some useful plugins.\n\n            Why use it over the official postgres image?\n            It is an unmodified Postgres image with convenient plugins added.\n            It's optimized for replication, and provides popular extensions like PostGIS, pgRouting, pgTAP, and more for enhanced functionality. Ideal for those who prefer an unaltered Postgres experience with added features.\n        end: \"Supabase (Postgres) is deployed and available as srv-captain--$$cap_appname-db:5432 to other apps. For example with NodeJS: 'const client = new Client({ user: 'cap_pg_user', host: 'srv-captain--$$cap_appname', database: 'cap_pg_db', password: '********', port: 5432})'\"\n    displayName: Supabase PostgreSQL\n    isOfficial: true\n    description: Supabase makes it easy to use Postgres.\n    documentation: Taken from https://hub.docker.com/r/bitnami/supabase-postgres",
    "logo": "primocms.png"
  }
};
